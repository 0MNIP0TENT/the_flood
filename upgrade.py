
"""
Research upgrades in the research_uprades function using the upgrade_anythin function.
The neccessary requirments will be built.
Note to self: do not include a LAIR if a HIVE is required
"""
from sc2.constants import EVOLUTIONCHAMBER,SPAWNINGPOOL,ZERGLINGMOVEMENTSPEED,\
SPAWNINGPOOL,ZERGLINGATTACKSPEED,LAIR,HIVE,INFESTATIONPIT,ZERGMELEEWEAPONSLEVEL1,\
ZERGMELEEWEAPONSLEVEL2,ZERGMELEEWEAPONSLEVEL3,ZERGMISSILEWEAPONSLEVEL1,ZERGMISSILEWEAPONSLEVEL2,\
ZERGMISSILEWEAPONSLEVEL3,ZERGGROUNDARMORSLEVEL1,ZERGGROUNDARMORSLEVEL2,ZERGGROUNDARMORSLEVEL3,\
BANELINGNEST,CENTRIFICALHOOKS,ZERGFLYERWEAPONSLEVEL1,ZERGFLYERWEAPONSLEVEL2,ZERGFLYERWEAPONSLEVEL3,\
ZERGFLYERARMORSLEVEL1,ZERGFLYERARMORSLEVEL2,ZERGFLYERARMORSLEVEL3,SPIRE,BURROW,HATCHERY,GLIALRECONSTITUTION,\
ROACHWARREN

import common
import build,training

researcher = {
GLIALRECONSTITUTION:ROACHWARREN,    
BURROW:HATCHERY,    
ZERGFLYERWEAPONSLEVEL1:SPIRE,
ZERGFLYERWEAPONSLEVEL2:SPIRE,
ZERGFLYERWEAPONSLEVEL3:SPIRE,    
ZERGFLYERARMORSLEVEL1:SPIRE,
ZERGFLYERARMORSLEVEL2:SPIRE,
ZERGFLYERARMORSLEVEL3:SPIRE,    
CENTRIFICALHOOKS:BANELINGNEST,
ZERGGROUNDARMORSLEVEL1:EVOLUTIONCHAMBER,
ZERGGROUNDARMORSLEVEL2:EVOLUTIONCHAMBER,
ZERGGROUNDARMORSLEVEL3:EVOLUTIONCHAMBER,
ZERGMISSILEWEAPONSLEVEL1:EVOLUTIONCHAMBER,
ZERGMISSILEWEAPONSLEVEL2:EVOLUTIONCHAMBER,
ZERGMISSILEWEAPONSLEVEL3:EVOLUTIONCHAMBER,    
ZERGMELEEWEAPONSLEVEL1:EVOLUTIONCHAMBER,
ZERGMELEEWEAPONSLEVEL2:EVOLUTIONCHAMBER,
ZERGMELEEWEAPONSLEVEL3:EVOLUTIONCHAMBER,
ZERGLINGATTACKSPEED:SPAWNINGPOOL,    
ZERGLINGMOVEMENTSPEED:SPAWNINGPOOL
}
requirments = {
GLIALRECONSTITUTION:[ROACHWARREN,LAIR,SPAWNINGPOOL],    
BURROW:[HATCHERY],    
SPIRE:[SPAWNINGPOOL,LAIR],    
ZERGFLYERWEAPONSLEVEL1:[SPIRE,SPAWNINGPOOL],
ZERGFLYERWEAPONSLEVEL2:[SPIRE,SPAWNINGPOOL,LAIR,ZERGFLYERWEAPONSLEVEL1],
ZERGFLYERWEAPONSLEVEL3:[SPIRE,SPAWNINGPOOL,ZERGFLYERWEAPONSLEVEL1,ZERGFLYERWEAPONSLEVEL2,HIVE],    
ZERGFLYERARMORSLEVEL1:[SPIRE,SPAWNINGPOOL],
ZERGFLYERARMORSLEVEL2:[SPIRE,SPAWNINGPOOL,LAIR,ZERGFLYERARMORSLEVEL1],
ZERGFLYERARMORSLEVEL3:[SPIRE,SPAWNINGPOOL,ZERGFLYERARMORSLEVEL1,ZERGFLYERARMORSLEVEL2,HIVE],    
CENTRIFICALHOOKS:[LAIR,SPAWNINGPOOL,BANELINGNEST],
ZERGGROUNDARMORSLEVEL1:[EVOLUTIONCHAMBER],
ZERGGROUNDARMORSLEVEL2:[EVOLUTIONCHAMBER,EVOLUTIONCHAMBER,ZERGGROUNDARMORSLEVEL1,LAIR,SPAWNINGPOOL],
ZERGGROUNDARMORSLEVEL3:[EVOLUTIONCHAMBER,EVOLUTIONCHAMBER,ZERGGROUNDARMORSLEVEL2,ZERGMISSILEWEAPONSLEVEL1,HIVE,SPAWNINGPOOL],
ZERGMISSILEWEAPONSLEVEL1:[EVOLUTIONCHAMBER],
ZERGMISSILEWEAPONSLEVEL2:[EVOLUTIONCHAMBER,EVOLUTIONCHAMBER,ZERGMISSILEWEAPONSLEVEL1,LAIR,SPAWNINGPOOL],
ZERGMISSILEWEAPONSLEVEL3:[EVOLUTIONCHAMBER,EVOLUTIONCHAMBER,ZERGMISSILEWEAPONSLEVEL1,ZERGMISSILEWEAPONSLEVEL2,ZERGMISSILEWEAPONSLEVEL1,HIVE,SPAWNINGPOOL],  
ZERGMELEEWEAPONSLEVEL1:[EVOLUTIONCHAMBER],
ZERGMELEEWEAPONSLEVEL2:[EVOLUTIONCHAMBER,ZERGMELEEWEAPONSLEVEL1,LAIR,SPAWNINGPOOL],
ZERGMELEEWEAPONSLEVEL3:[EVOLUTIONCHAMBER,ZERGMELEEWEAPONSLEVEL1,ZERGMELEEWEAPONSLEVEL2,HIVE,SPAWNINGPOOL],    
ZERGLINGATTACKSPEED:[SPAWNINGPOOL,HIVE,INFESTATIONPIT],    
ZERGLINGMOVEMENTSPEED:[SPAWNINGPOOL]
}
requirment = {
GLIALRECONSTITUTION:LAIR,    
BURROW:HATCHERY,    
SPIRE:LAIR,
ZERGFLYERWEAPONSLEVEL1:SPIRE,
ZERGFLYERWEAPONSLEVEL2:LAIR,
ZERGFLYERWEAPONSLEVEL3:HIVE,
ZERGFLYERARMORSLEVEL1:SPIRE,
ZERGFLYERARMORSLEVEL2:LAIR,  
ZERGFLYERARMORSLEVEL3:HIVE,        
CENTRIFICALHOOKS:LAIR,
ZERGGROUNDARMORSLEVEL1:EVOLUTIONCHAMBER,
ZERGGROUNDARMORSLEVEL2:LAIR,
ZERGGROUNDARMORSLEVEL3:HIVE,
ZERGMELEEWEAPONSLEVEL1:EVOLUTIONCHAMBER,
ZERGMELEEWEAPONSLEVEL2:LAIR,
ZERGMELEEWEAPONSLEVEL3:HIVE,
ZERGMISSILEWEAPONSLEVEL1:EVOLUTIONCHAMBER,
ZERGMISSILEWEAPONSLEVEL2:LAIR,
ZERGMISSILEWEAPONSLEVEL3:HIVE,
ZERGLINGATTACKSPEED:HIVE,    
ZERGLINGMOVEMENTSPEED:SPAWNINGPOOL
}
req_type = {
GLIALRECONSTITUTION:'UPGRADE',
ROACHWARREN:'DRONE',    
BURROW:'UPGRADE',    
HATCHERY:'DRONE',    
SPIRE:'DRONE',
ZERGFLYERARMORSLEVEL1:'UPGRADE',
ZERGFLYERARMORSLEVEL2:'UPGRADE',  
ZERGFLYERARMORSLEVEL3:'UPGRADE',  
ZERGFLYERWEAPONSLEVEL1:'UPGRADE',
ZERGFLYERWEAPONSLEVEL2:'UPGRADE',
ZERGFLYERWEAPONSLEVEL3:'UPGRADE',        
BANELINGNEST:'DRONE',
EVOLUTIONCHAMBER:'DRONE',
LAIR:'MORPH',
HIVE:'MORPH',
SPAWNINGPOOL:'DRONE',
INFESTATIONPIT:'DRONE',
ZERGMISSILEWEAPONSLEVEL1:'UPGRADE',
ZERGMISSILEWEAPONSLEVEL2:'UPGRADE',
ZERGMISSILEWEAPONSLEVEL3:'UPGRADE',
ZERGMELEEWEAPONSLEVEL1:'UPGRADE',
ZERGMELEEWEAPONSLEVEL2:'UPGRADE',
ZERGMELEEWEAPONSLEVEL3:'UPGRADE',
ZERGGROUNDARMORSLEVEL1:'UPGRADE',
ZERGGROUNDARMORSLEVEL2:'UPGRADE',
ZERGGROUNDARMORSLEVEL3:'UPGRADE',
}
async def upgrade_anything(self,upgrade):
    if self.units(requirment[upgrade]).empty:
        for req in requirments[upgrade]:
            
            if req_type[req] == 'DRONE' and self.units(req).empty:
                await build.build_requirment(self,req)
            
            elif req_type[req] == 'MORPH':
                if req == LAIR and self.units(LAIR).exists or self.already_pending(LAIR):
                    continue
                elif req == HIVE and self.units(HIVE).exists or self.already_pending(HIVE):  
                    continue
                await training.train_anything(self,req) 
              
            elif req_type[req] == 'UPGRADE':
                await upgrade_anything(self,req)    
    else:
        if self.can_afford(upgrade) and not self.already_pending_upgrade(upgrade) and self.units(researcher[upgrade]).exists:
            await self.do(self.units(researcher[upgrade]).random.research(upgrade))

"""
Add your research code here. You can delete the 2 examples if you want.
"""
async def research_upgrades(self):
    pass
    # await upgrade_anything(self,CENTRIFICALHOOKS)
    # await upgrade_anything(self,ZERGLINGMOVEMENTSPEED)
    # await upgrade_anything(self,ZERGLINGATTACKSPEED)
    await upgrade_anything(self,ZERGFLYERWEAPONSLEVEL3)
    # await upgrade_anything(self,ZERGMISSILEWEAPONSLEVEL3)
    # await upgrade_anything(self,ZERGMELEEWEAPONSLEVEL3)
    # await upgrade_anything(self,GLIALRECONSTITUTION)
         